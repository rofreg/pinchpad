//
// Generated by CocoaPods-Keys
// on 22/09/2019
// For more information see https://github.com/orta/cocoapods-keys
//

#import <objc/runtime.h>
#import <Foundation/NSDictionary.h>
#import "PinchPadKeys.h"

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wincomplete-implementation"

@implementation PinchPadKeys

  @dynamic twitterConsumerKey;
  @dynamic twitterConsumerSecret;
  @dynamic tumblrConsumerKey;
  @dynamic tumblrConsumerSecret;

#pragma clang diagnostic pop

+ (BOOL)resolveInstanceMethod:(SEL)name
{
  NSString *key = NSStringFromSelector(name);
  NSString * (*implementation)(PinchPadKeys *, SEL) = NULL;

  if ([key isEqualToString:@"twitterConsumerKey"]) {
    implementation = _podKeysda5f4adf813943c250dc9473bc6726bc;
  }

  if ([key isEqualToString:@"twitterConsumerSecret"]) {
    implementation = _podKeys6739d252138def69343d23b2b0978100;
  }

  if ([key isEqualToString:@"tumblrConsumerKey"]) {
    implementation = _podKeysd72a745f7f41861f66639426f56b75c6;
  }

  if ([key isEqualToString:@"tumblrConsumerSecret"]) {
    implementation = _podKeys60ff2bf47c23e3c000af83aa4b4fb75a;
  }

  if (!implementation) {
    return [super resolveInstanceMethod:name];
  }

  return class_addMethod([self class], name, (IMP)implementation, "@@:");
}

static NSString *_podKeysda5f4adf813943c250dc9473bc6726bc(PinchPadKeys *self, SEL _cmd)
{
  
    
      char cString[26] = { PinchPadKeysData[5428], PinchPadKeysData[2970], PinchPadKeysData[1592], PinchPadKeysData[765], PinchPadKeysData[4201], PinchPadKeysData[511], PinchPadKeysData[1368], PinchPadKeysData[3404], PinchPadKeysData[418], PinchPadKeysData[2090], PinchPadKeysData[4770], PinchPadKeysData[4579], PinchPadKeysData[4964], PinchPadKeysData[3203], PinchPadKeysData[2097], PinchPadKeysData[1536], PinchPadKeysData[2803], PinchPadKeysData[5417], PinchPadKeysData[3999], PinchPadKeysData[794], PinchPadKeysData[4852], PinchPadKeysData[3072], PinchPadKeysData[749], PinchPadKeysData[2938], PinchPadKeysData[3821], '\0' };
    
    return [NSString stringWithCString:cString encoding:NSUTF8StringEncoding];
  
}

static NSString *_podKeys6739d252138def69343d23b2b0978100(PinchPadKeys *self, SEL _cmd)
{
  
    
      char cString[51] = { PinchPadKeysData[1990], PinchPadKeysData[1298], PinchPadKeysData[4712], PinchPadKeysData[3320], PinchPadKeysData[276], PinchPadKeysData[620], PinchPadKeysData[1497], PinchPadKeysData[905], PinchPadKeysData[4959], PinchPadKeysData[3985], PinchPadKeysData[5344], PinchPadKeysData[5458], PinchPadKeysData[868], PinchPadKeysData[4644], PinchPadKeysData[5347], PinchPadKeysData[2048], PinchPadKeysData[4765], PinchPadKeysData[2764], PinchPadKeysData[452], PinchPadKeysData[3860], PinchPadKeysData[3440], PinchPadKeysData[4389], PinchPadKeysData[2055], PinchPadKeysData[74], PinchPadKeysData[1125], PinchPadKeysData[2056], PinchPadKeysData[397], PinchPadKeysData[1330], PinchPadKeysData[3636], PinchPadKeysData[2604], PinchPadKeysData[2722], PinchPadKeysData[383], PinchPadKeysData[1761], PinchPadKeysData[4296], PinchPadKeysData[4467], PinchPadKeysData[147], PinchPadKeysData[1212], PinchPadKeysData[3925], PinchPadKeysData[4010], PinchPadKeysData[2005], PinchPadKeysData[3112], PinchPadKeysData[4528], PinchPadKeysData[3699], PinchPadKeysData[531], PinchPadKeysData[962], PinchPadKeysData[1416], PinchPadKeysData[1072], PinchPadKeysData[277], PinchPadKeysData[2527], PinchPadKeysData[2961], '\0' };
    
    return [NSString stringWithCString:cString encoding:NSUTF8StringEncoding];
  
}

static NSString *_podKeysd72a745f7f41861f66639426f56b75c6(PinchPadKeys *self, SEL _cmd)
{
  
    
      char cString[51] = { PinchPadKeysData[2680], PinchPadKeysData[1724], PinchPadKeysData[3411], PinchPadKeysData[886], PinchPadKeysData[3367], PinchPadKeysData[2228], PinchPadKeysData[3660], PinchPadKeysData[4872], PinchPadKeysData[5224], PinchPadKeysData[791], PinchPadKeysData[3574], PinchPadKeysData[2501], PinchPadKeysData[810], PinchPadKeysData[1962], PinchPadKeysData[3217], PinchPadKeysData[4662], PinchPadKeysData[1346], PinchPadKeysData[4940], PinchPadKeysData[4017], PinchPadKeysData[2329], PinchPadKeysData[948], PinchPadKeysData[3115], PinchPadKeysData[4444], PinchPadKeysData[1190], PinchPadKeysData[1487], PinchPadKeysData[376], PinchPadKeysData[2562], PinchPadKeysData[1335], PinchPadKeysData[4687], PinchPadKeysData[3577], PinchPadKeysData[3817], PinchPadKeysData[3447], PinchPadKeysData[4608], PinchPadKeysData[671], PinchPadKeysData[5502], PinchPadKeysData[966], PinchPadKeysData[2880], PinchPadKeysData[5207], PinchPadKeysData[2477], PinchPadKeysData[3176], PinchPadKeysData[2863], PinchPadKeysData[5389], PinchPadKeysData[3825], PinchPadKeysData[1091], PinchPadKeysData[1258], PinchPadKeysData[1528], PinchPadKeysData[4422], PinchPadKeysData[1665], PinchPadKeysData[2543], PinchPadKeysData[2251], '\0' };
    
    return [NSString stringWithCString:cString encoding:NSUTF8StringEncoding];
  
}

static NSString *_podKeys60ff2bf47c23e3c000af83aa4b4fb75a(PinchPadKeys *self, SEL _cmd)
{
  
    
      char cString[51] = { PinchPadKeysData[707], PinchPadKeysData[2774], PinchPadKeysData[2532], PinchPadKeysData[1160], PinchPadKeysData[5453], PinchPadKeysData[5052], PinchPadKeysData[1775], PinchPadKeysData[1572], PinchPadKeysData[3838], PinchPadKeysData[4324], PinchPadKeysData[4757], PinchPadKeysData[4510], PinchPadKeysData[885], PinchPadKeysData[2247], PinchPadKeysData[4417], PinchPadKeysData[2017], PinchPadKeysData[2384], PinchPadKeysData[4249], PinchPadKeysData[5368], PinchPadKeysData[4208], PinchPadKeysData[4283], PinchPadKeysData[572], PinchPadKeysData[4869], PinchPadKeysData[1778], PinchPadKeysData[3321], PinchPadKeysData[2319], PinchPadKeysData[260], PinchPadKeysData[729], PinchPadKeysData[3400], PinchPadKeysData[2285], PinchPadKeysData[244], PinchPadKeysData[781], PinchPadKeysData[1866], PinchPadKeysData[5165], PinchPadKeysData[3270], PinchPadKeysData[84], PinchPadKeysData[5291], PinchPadKeysData[2677], PinchPadKeysData[2095], PinchPadKeysData[3466], PinchPadKeysData[2977], PinchPadKeysData[1023], PinchPadKeysData[3205], PinchPadKeysData[1881], PinchPadKeysData[85], PinchPadKeysData[3006], PinchPadKeysData[624], PinchPadKeysData[2142], PinchPadKeysData[2947], PinchPadKeysData[426], '\0' };
    
    return [NSString stringWithCString:cString encoding:NSUTF8StringEncoding];
  
}


static char PinchPadKeysData[5602] = "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\\\"";

- (NSString *)description
{
  return [@{
            @"twitterConsumerKey": self.twitterConsumerKey,
            @"twitterConsumerSecret": self.twitterConsumerSecret,
            @"tumblrConsumerKey": self.tumblrConsumerKey,
            @"tumblrConsumerSecret": self.tumblrConsumerSecret,
  } description];
}

- (id)debugQuickLookObject
{
  return [self description];
}

@end
