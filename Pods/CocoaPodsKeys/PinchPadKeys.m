//
// Generated by CocoaPods-Keys
// on 17/07/2017
// For more information see https://github.com/orta/cocoapods-keys
//

#import <objc/runtime.h>
#import <Foundation/NSDictionary.h>
#import "PinchPadKeys.h"

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wincomplete-implementation"

@implementation PinchPadKeys

  @dynamic twitterConsumerKey;
  @dynamic twitterConsumerSecret;
  @dynamic tumblrConsumerKey;
  @dynamic tumblrConsumerSecret;

#pragma clang diagnostic pop

+ (BOOL)resolveInstanceMethod:(SEL)name
{
  NSString *key = NSStringFromSelector(name);
  NSString * (*implementation)(PinchPadKeys *, SEL) = NULL;

  if ([key isEqualToString:@"twitterConsumerKey"]) {
    implementation = _podKeysda5f4adf813943c250dc9473bc6726bc;
  }

  if ([key isEqualToString:@"twitterConsumerSecret"]) {
    implementation = _podKeys6739d252138def69343d23b2b0978100;
  }

  if ([key isEqualToString:@"tumblrConsumerKey"]) {
    implementation = _podKeysd72a745f7f41861f66639426f56b75c6;
  }

  if ([key isEqualToString:@"tumblrConsumerSecret"]) {
    implementation = _podKeys60ff2bf47c23e3c000af83aa4b4fb75a;
  }

  if (!implementation) {
    return [super resolveInstanceMethod:name];
  }

  return class_addMethod([self class], name, (IMP)implementation, "@@:");
}

static NSString *_podKeysda5f4adf813943c250dc9473bc6726bc(PinchPadKeys *self, SEL _cmd)
{
  
    
      char cString[26] = { PinchPadKeysData[5691], PinchPadKeysData[5795], PinchPadKeysData[5027], PinchPadKeysData[1278], PinchPadKeysData[5184], PinchPadKeysData[5198], PinchPadKeysData[1896], PinchPadKeysData[278], PinchPadKeysData[783], PinchPadKeysData[338], PinchPadKeysData[471], PinchPadKeysData[5043], PinchPadKeysData[3206], PinchPadKeysData[559], PinchPadKeysData[3541], PinchPadKeysData[4791], PinchPadKeysData[4511], PinchPadKeysData[4938], PinchPadKeysData[58], PinchPadKeysData[1103], PinchPadKeysData[3566], PinchPadKeysData[859], PinchPadKeysData[4575], PinchPadKeysData[1008], PinchPadKeysData[3181], '\0' };
    
    return [NSString stringWithCString:cString encoding:NSUTF8StringEncoding];
  
}

static NSString *_podKeys6739d252138def69343d23b2b0978100(PinchPadKeys *self, SEL _cmd)
{
  
    
      char cString[51] = { PinchPadKeysData[2787], PinchPadKeysData[3226], PinchPadKeysData[3130], PinchPadKeysData[35], PinchPadKeysData[4159], PinchPadKeysData[4152], PinchPadKeysData[1947], PinchPadKeysData[2167], PinchPadKeysData[454], PinchPadKeysData[3986], PinchPadKeysData[2337], PinchPadKeysData[3401], PinchPadKeysData[1593], PinchPadKeysData[826], PinchPadKeysData[3836], PinchPadKeysData[2162], PinchPadKeysData[4978], PinchPadKeysData[1158], PinchPadKeysData[3063], PinchPadKeysData[3522], PinchPadKeysData[3747], PinchPadKeysData[888], PinchPadKeysData[2681], PinchPadKeysData[604], PinchPadKeysData[3384], PinchPadKeysData[4425], PinchPadKeysData[2672], PinchPadKeysData[1847], PinchPadKeysData[5444], PinchPadKeysData[3108], PinchPadKeysData[5618], PinchPadKeysData[1379], PinchPadKeysData[2656], PinchPadKeysData[3087], PinchPadKeysData[5783], PinchPadKeysData[880], PinchPadKeysData[4207], PinchPadKeysData[1061], PinchPadKeysData[3456], PinchPadKeysData[3168], PinchPadKeysData[5042], PinchPadKeysData[4853], PinchPadKeysData[2333], PinchPadKeysData[4156], PinchPadKeysData[1604], PinchPadKeysData[3569], PinchPadKeysData[3726], PinchPadKeysData[2603], PinchPadKeysData[2842], PinchPadKeysData[4955], '\0' };
    
    return [NSString stringWithCString:cString encoding:NSUTF8StringEncoding];
  
}

static NSString *_podKeysd72a745f7f41861f66639426f56b75c6(PinchPadKeys *self, SEL _cmd)
{
  
    
      char cString[51] = { PinchPadKeysData[4037], PinchPadKeysData[5516], PinchPadKeysData[5285], PinchPadKeysData[5039], PinchPadKeysData[3867], PinchPadKeysData[2755], PinchPadKeysData[4228], PinchPadKeysData[5784], PinchPadKeysData[2734], PinchPadKeysData[560], PinchPadKeysData[274], PinchPadKeysData[4442], PinchPadKeysData[195], PinchPadKeysData[5081], PinchPadKeysData[504], PinchPadKeysData[1861], PinchPadKeysData[4567], PinchPadKeysData[4721], PinchPadKeysData[2153], PinchPadKeysData[3015], PinchPadKeysData[1167], PinchPadKeysData[4898], PinchPadKeysData[3129], PinchPadKeysData[5748], PinchPadKeysData[2101], PinchPadKeysData[2313], PinchPadKeysData[1762], PinchPadKeysData[1830], PinchPadKeysData[1478], PinchPadKeysData[1547], PinchPadKeysData[2796], PinchPadKeysData[1104], PinchPadKeysData[4558], PinchPadKeysData[4129], PinchPadKeysData[4930], PinchPadKeysData[1302], PinchPadKeysData[3728], PinchPadKeysData[2970], PinchPadKeysData[2608], PinchPadKeysData[1387], PinchPadKeysData[2738], PinchPadKeysData[4560], PinchPadKeysData[3898], PinchPadKeysData[1875], PinchPadKeysData[4583], PinchPadKeysData[5093], PinchPadKeysData[1405], PinchPadKeysData[3769], PinchPadKeysData[2378], PinchPadKeysData[1934], '\0' };
    
    return [NSString stringWithCString:cString encoding:NSUTF8StringEncoding];
  
}

static NSString *_podKeys60ff2bf47c23e3c000af83aa4b4fb75a(PinchPadKeys *self, SEL _cmd)
{
  
    
      char cString[51] = { PinchPadKeysData[5380], PinchPadKeysData[5717], PinchPadKeysData[4068], PinchPadKeysData[2231], PinchPadKeysData[2577], PinchPadKeysData[5099], PinchPadKeysData[4813], PinchPadKeysData[4169], PinchPadKeysData[5663], PinchPadKeysData[3337], PinchPadKeysData[4222], PinchPadKeysData[505], PinchPadKeysData[1307], PinchPadKeysData[717], PinchPadKeysData[1128], PinchPadKeysData[637], PinchPadKeysData[77], PinchPadKeysData[5084], PinchPadKeysData[588], PinchPadKeysData[1951], PinchPadKeysData[3633], PinchPadKeysData[2507], PinchPadKeysData[3672], PinchPadKeysData[2666], PinchPadKeysData[2], PinchPadKeysData[4270], PinchPadKeysData[5260], PinchPadKeysData[3644], PinchPadKeysData[3422], PinchPadKeysData[3607], PinchPadKeysData[1727], PinchPadKeysData[2941], PinchPadKeysData[4118], PinchPadKeysData[3347], PinchPadKeysData[3600], PinchPadKeysData[2761], PinchPadKeysData[401], PinchPadKeysData[2404], PinchPadKeysData[5097], PinchPadKeysData[3464], PinchPadKeysData[2320], PinchPadKeysData[3433], PinchPadKeysData[999], PinchPadKeysData[3452], PinchPadKeysData[1284], PinchPadKeysData[4251], PinchPadKeysData[3331], PinchPadKeysData[4269], PinchPadKeysData[1407], PinchPadKeysData[1798], '\0' };
    
    return [NSString stringWithCString:cString encoding:NSUTF8StringEncoding];
  
}


static char PinchPadKeysData[5838] = "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\\\"";

- (NSString *)description
{
  return [@{
            @"twitterConsumerKey": self.twitterConsumerKey,
            @"twitterConsumerSecret": self.twitterConsumerSecret,
            @"tumblrConsumerKey": self.tumblrConsumerKey,
            @"tumblrConsumerSecret": self.tumblrConsumerSecret,
  } description];
}

- (id)debugQuickLookObject
{
  return [self description];
}

@end
